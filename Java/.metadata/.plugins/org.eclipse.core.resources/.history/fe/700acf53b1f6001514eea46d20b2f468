package com.dynocloud.api;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
//import java.util.ArrayList;
import java.util.Random;

import javax.annotation.Priority;
import javax.ws.rs.Consumes;
import javax.ws.rs.NotAuthorizedException;
//import javax.ws.rs.NotFoundException;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.Response;

import javax.ws.rs.Priorities;



@Path("/logout")

public class Logout{

	//@Override
	@POST
    @Produces("application/json")
    public Response delteToken(@Context HttpHeaders headers) {

		System.out.println("logout [POST]");
		

        String authorizationHeader = 
        		headers.getHeaderString(HttpHeaders.AUTHORIZATION);


        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            throw new NotAuthorizedException("Authorization header must be provided");
        }

        String token = authorizationHeader.substring("Bearer".length()).trim();

        
    	Database_connection link = new Database_connection();
     	 PreparedStatement prep_sql;
        
        try {
  	
        	  
        	  		link.Open_link();
        		

        	  		
        	  	try{
        			String query_deleteToken= "Delete FROM Session where `Token` = ?;";
        			prep_sql = link.linea.prepareStatement(query_deleteToken);
        			prep_sql.setString(1, token);
        			
        			//ResultSet rs_query_validateToken = 
        			prep_sql.executeUpdate();

        			System.out.println("logout [" + token +"]");
        			
		

        			
        	  }catch(Exception e){

      			System.out.println("Error at query_deleteToken: " + e.getMessage());
      			
      			link.Close_link();
      			throw new NotAuthorizedException("Invalid session token");
      		}
      	
      	
      	
        	 link.Close_link();
        	
        	
        	
             Response.ok(token).build();

        } catch (Exception e) {
        	System.out.println("Error authenticating user");
             Response.status(Response.Status.UNAUTHORIZED).build();
            
        } 
        
   return Response.ok(token).entity("logout is called, authorizationHeader : " + token).build();
    }


    
}